import "./chunk-T3OTYR2Y.js";
import "./chunk-RIXFT5AQ.js";
import {
  add_locations,
  append_styles,
  bind_this,
  bind_window_size,
  check_target,
  cleanup_styles,
  hmr,
  init,
  legacy_api,
  onMount,
  prop,
  set_custom_element_data,
  slot
} from "./chunk-2GESLLS2.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  template
} from "./chunk-MRCBNVJU.js";
import {
  FILENAME,
  HMR,
  child,
  deep_read_state,
  get,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_state,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  template_effect
} from "./chunk-5R5I7OSA.js";
import "./chunk-X4XZK27Q.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-UGBVNEQM.js";

// node_modules/@sveltejs/svelte-scroller/Scroller.svelte
mark_module_start();
Scroller[FILENAME] = "node_modules/@sveltejs/svelte-scroller/Scroller.svelte";
var handlers = [];
var manager;
if (strict_equals(typeof window, "undefined", false)) {
  const run_all = () => handlers.forEach((fn) => fn());
  window.addEventListener("scroll", run_all);
  window.addEventListener("resize", run_all);
}
if (strict_equals(typeof IntersectionObserver, "undefined", false)) {
  const map = /* @__PURE__ */ new Map();
  const observer = new IntersectionObserver(
    (entries, observer2) => {
      entries.forEach((entry) => {
        const update = map.get(entry.target);
        const index = handlers.indexOf(update);
        if (entry.isIntersecting) {
          if (strict_equals(index, -1)) handlers.push(update);
        } else {
          update();
          if (strict_equals(index, -1, false)) handlers.splice(index, 1);
        }
      });
    },
    {
      rootMargin: "400px 0px"
      // TODO why 400?
    }
  );
  manager = {
    add: ({ outer, update }) => {
      const { top, bottom } = outer.getBoundingClientRect();
      if (top < window.innerHeight && bottom > 0) handlers.push(update);
      map.set(outer, update);
      observer.observe(outer);
    },
    remove: ({ outer, update }) => {
      const index = handlers.indexOf(update);
      if (strict_equals(index, -1, false)) handlers.splice(index, 1);
      map.delete(outer);
      observer.unobserve(outer);
    }
  };
} else {
  manager = {
    add: ({ update }) => {
      handlers.push(update);
    },
    remove: ({ update }) => {
      const index = handlers.indexOf(update);
      if (strict_equals(index, -1, false)) handlers.splice(index, 1);
    }
  };
}
var root = add_locations(template(`<svelte-scroller-outer><svelte-scroller-background-container><svelte-scroller-background><!></svelte-scroller-background></svelte-scroller-background-container> <svelte-scroller-foreground><!></svelte-scroller-foreground></svelte-scroller-outer>`, 2), Scroller[FILENAME], [
  [
    172,
    0,
    [
      [173, 1, [[174, 2]]],
      [179, 1]
    ]
  ]
]);
var $$css = {
  hash: "s-GjPH4R8Esh6C",
  code: "\n	svelte-scroller-outer.s-GjPH4R8Esh6C {\n		display: block;\n		position: relative;\n	}\n\n	svelte-scroller-background.s-GjPH4R8Esh6C {\n		display: block;\n		position: relative;\n		width: 100%;\n	}\n\n	svelte-scroller-foreground.s-GjPH4R8Esh6C {\n		display: block;\n		position: relative;\n		z-index: 2;\n	}\n\n	svelte-scroller-foreground.s-GjPH4R8Esh6C::after {\n		content: ' ';\n		display: block;\n		clear: both;\n	}\n\n	svelte-scroller-background-container.s-GjPH4R8Esh6C {\n		display: block;\n		position: absolute;\n		width: 100%;\n		max-width: 100%;\n		pointer-events: none;\n		/* height: 100%; */\n\n		/* in theory this helps prevent jumping */\n		will-change: transform;\n		/* -webkit-transform: translate3d(0, 0, 0);\n		-moz-transform: translate3d(0, 0, 0);\n		transform: translate3d(0, 0, 0); */\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Nyb2xsZXIuc3ZlbHRlIiwibWFwcGluZ3MiOiI7QUF3TEEsQ0FBQyxvQ0FBcUIsQ0FBQztBQUN2QixFQUFFLGNBQWM7QUFDaEIsRUFBRSxrQkFBa0I7QUFDcEI7O0FBRUEsQ0FBQyx5Q0FBMEIsQ0FBQztBQUM1QixFQUFFLGNBQWM7QUFDaEIsRUFBRSxrQkFBa0I7QUFDcEIsRUFBRSxXQUFXO0FBQ2I7O0FBRUEsQ0FBQyx5Q0FBMEIsQ0FBQztBQUM1QixFQUFFLGNBQWM7QUFDaEIsRUFBRSxrQkFBa0I7QUFDcEIsRUFBRSxVQUFVO0FBQ1o7O0FBRUEsQ0FBQyx5Q0FBMEIsT0FBTyxDQUFDO0FBQ25DLEVBQUUsWUFBWTtBQUNkLEVBQUUsY0FBYztBQUNoQixFQUFFLFdBQVc7QUFDYjs7QUFFQSxDQUFDLG1EQUFvQyxDQUFDO0FBQ3RDLEVBQUUsY0FBYztBQUNoQixFQUFFLGtCQUFrQjtBQUNwQixFQUFFLFdBQVc7QUFDYixFQUFFLGVBQWU7QUFDakIsRUFBRSxvQkFBb0I7QUFDdEI7O0FBRUE7QUFDQSxFQUFFLHNCQUFzQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiU2Nyb2xsZXIuc3ZlbHRlIl19 */"
};
function Scroller($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Scroller);
  append_styles($$anchor, $$css);
  const top_px = mutable_state();
  const bottom_px = mutable_state();
  const threshold_px = mutable_state();
  const style = mutable_state();
  const widthStyle = mutable_state();
  let top = prop($$props, "top", 8, 0);
  let bottom = prop($$props, "bottom", 8, 1);
  let threshold = prop($$props, "threshold", 8, 0.5);
  let query = prop($$props, "query", 8, "section");
  let parallax = prop($$props, "parallax", 8, false);
  let index = prop($$props, "index", 12, 0);
  let count = prop($$props, "count", 12, 0);
  let offset = prop($$props, "offset", 12, 0);
  let progress = prop($$props, "progress", 12, 0);
  let visible = prop($$props, "visible", 12, false);
  let outer = mutable_state();
  let foreground = mutable_state();
  let background = mutable_state();
  let left;
  let sections;
  let wh = mutable_state(0);
  let fixed = mutable_state();
  let offset_top = mutable_state(0);
  let width = mutable_state(1);
  let height;
  let inverted;
  onMount(() => {
    sections = get(foreground).querySelectorAll(query());
    count(sections.length);
    update();
    const scroller = { outer: get(outer), update };
    manager.add(scroller);
    return () => manager.remove(scroller);
  });
  function update() {
    if (!get(foreground)) return;
    const bcr = get(outer).getBoundingClientRect();
    left = bcr.left;
    set(width, bcr.right - left);
    const fg = get(foreground).getBoundingClientRect();
    const bg = get(background).getBoundingClientRect();
    visible(fg.top < get(wh) && fg.bottom > 0);
    const foreground_height = fg.bottom - fg.top;
    const background_height = bg.bottom - bg.top;
    const available_space = get(bottom_px) - get(top_px);
    progress((get(top_px) - fg.top) / (foreground_height - available_space));
    if (progress() <= 0) {
      set(offset_top, 0);
      set(fixed, false);
    } else if (progress() >= 1) {
      set(offset_top, parallax() ? foreground_height - background_height : foreground_height - available_space);
      set(fixed, false);
    } else {
      set(offset_top, parallax() ? Math.round(get(top_px) - progress() * (background_height - available_space)) : get(top_px));
      set(fixed, true);
    }
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      const { top: top2 } = section.getBoundingClientRect();
      const next = sections[i + 1];
      const bottom2 = next ? next.getBoundingClientRect().top : fg.bottom;
      offset((get(threshold_px) - top2) / (bottom2 - top2));
      if (bottom2 >= get(threshold_px)) {
        index(i);
        break;
      }
    }
  }
  legacy_pre_effect(
    () => (deep_read_state(top()), get(wh)),
    () => {
      set(top_px, Math.round(top() * get(wh)));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(bottom()), get(wh)),
    () => {
      set(bottom_px, Math.round(bottom() * get(wh)));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(threshold()), get(wh)),
    () => {
      set(threshold_px, Math.round(threshold() * get(wh)));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(top()), deep_read_state(bottom()), deep_read_state(threshold()), deep_read_state(parallax())),
    () => {
      top(), bottom(), threshold(), parallax(), update();
    }
  );
  legacy_pre_effect(() => (get(fixed), get(offset_top)), () => {
    set(style, `
		position: ${get(fixed) ? "fixed" : "absolute"};
		top: 0;
		transform: translate(0, ${get(offset_top)}px);
		z-index: ${inverted ? 3 : 1};
	`);
  });
  legacy_pre_effect(() => (get(fixed), get(width)), () => {
    set(widthStyle, get(fixed) ? `width:${get(width)}px;` : "");
  });
  legacy_pre_effect_reset();
  init();
  var svelte_scroller_outer = root();
  set_custom_element_data(svelte_scroller_outer, "class", "s-GjPH4R8Esh6C");
  var svelte_scroller_background_container = child(svelte_scroller_outer);
  set_custom_element_data(svelte_scroller_background_container, "class", "background-container s-GjPH4R8Esh6C");
  var svelte_scroller_background = child(svelte_scroller_background_container);
  set_custom_element_data(svelte_scroller_background, "class", "s-GjPH4R8Esh6C");
  var node = child(svelte_scroller_background);
  slot(node, $$props, "background", {}, null);
  reset(svelte_scroller_background);
  bind_this(svelte_scroller_background, ($$value) => set(background, $$value), () => get(background));
  reset(svelte_scroller_background_container);
  var svelte_scroller_foreground = sibling(svelte_scroller_background_container, 2);
  set_custom_element_data(svelte_scroller_foreground, "class", "s-GjPH4R8Esh6C");
  var node_1 = child(svelte_scroller_foreground);
  slot(node_1, $$props, "foreground", {}, null);
  reset(svelte_scroller_foreground);
  bind_this(svelte_scroller_foreground, ($$value) => set(foreground, $$value), () => get(foreground));
  reset(svelte_scroller_outer);
  bind_this(svelte_scroller_outer, ($$value) => set(outer, $$value), () => get(outer));
  template_effect(() => set_custom_element_data(svelte_scroller_background_container, "style", `${get(style) ?? ""}${get(widthStyle) ?? ""}`));
  bind_window_size("innerHeight", ($$value) => set(wh, $$value));
  append($$anchor, svelte_scroller_outer);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scroller = hmr(Scroller, () => Scroller[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-GjPH4R8Esh6C");
    module.default[HMR].source = Scroller[HMR].source;
    set(Scroller[HMR].source, module.default[HMR].original);
  });
}
var Scroller_default = Scroller;
mark_module_end(Scroller);
export {
  Scroller_default as default
};
//# sourceMappingURL=@sveltejs_svelte-scroller.js.map
